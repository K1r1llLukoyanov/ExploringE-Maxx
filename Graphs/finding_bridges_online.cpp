#include <iostream>
#include <vector>
using namespace std;

const int MAXN = 4;                                                 // максимальное количество вершин в графе
int n = MAXN, bridges, par[MAXN], bl[MAXN], comp[MAXN], size[MAXN]; // n - кол-во вершин, bridges - кол-во мостов, par - массив предков
// bl - массив используемый для сжатия вершин компоненты сильной связности в одну вершину
// comp - массив на основе системы непересекащихся множеств
// size - размер компоненты которой принадлежит вершина

void init() // инициализация начальных значений
{
    for (int i = 0; i < n; i++)
    {
        bl[i] = comp[i] = i; // каждая отдельная вершина - компонента сильной связности и никакие вершины не связаны ребрами
        size[i] = 1;
        par[i] = -1;
    }
    bridges = 0; // изначально 0 мостов
}

int get(int v) // получение главной вершины компоненты двуреберной связности в которой находится вершина v
{
    if (v == -1)
        return -1;
    return bl[v] == v ? v : bl[v] = get(bl[v]); // мы также обновляем указатели на главную вершину через bl[v] = get(bl[v])
}

int get_comp(int v) // колучение корневой вершины компоненты сильной связности
{
    v = get(v);
    return comp[v] == v ? v : comp[v] = get_comp(comp[v]);
}

void make_root(int v) // функция для подвешивания непересекающегося множества за вершину v
{
    v = get(v);               // для начала получаем главную вершину из компоненты двуреберной связности
    int root = v, child = -1; // запоминаем v как корень root
    while (v != -1)           // пока вершина не равна -1
    {
        int p = get(par[v]); // получаем главную вершину для компоненты вершины предка v: get(par[v])
        par[v] = child;      // присваиваем дочерную вершину:
        comp[v] = root;      // перенаправляем все вершины компоненты на корень v
        child = v;           // теперь v будет child'ом для get(par[v])
        v = p;               // v = get(par[v])
    }
    size[root] = size[child]; // обновляем значение size
}

int cu = 0, u[MAXN]; // cu - используется для числовой пометки вершин
// u - массив с временем посещения (чтобы каждый раз не выставлять значение на false)

void merge_path(int a, int b)
{
    ++cu;               // номер вызова merge_path
    vector<int> va, vb; // va хранит путь, пройденный от вершины a, vb - путь, пройденный от вершины b
    int lca = -1;
    for (;;)
    {
        if (a != -1)
        {
            a = get(a);
            va.push_back(a); // добавляем вершину в путь
            if (u[a] == cu)  // пока не встретим вершину в которой уже были
            {
                lca = a;
                break;
            }
            u[a] = cu;  // ставим пометку
            a = par[a]; // берем следующую вершину
        }
        if (b != -1) // так же для b
        {
            b = get(b);
            vb.push_back(b);
            if (u[b] == cu) // пока не встретим вершину в которой ужи были
            {
                lca = b;
                break;
            }
            u[b] = cu;
            b = par[b];
        }
    }

    for (size_t i = 0; i < va.size(); ++i)
    {
        bl[va[i]] = lca;  // сжимаем все пройденные вершины до первой повторившейся
        if (va[i] == lca) // пока не встретим первую повторившуюся
            break;
        --bridges; // уменьшаем кол-во мостов
    }
    for (size_t i = 0; i < vb.size(); ++i)
    {
        bl[vb[i]] = lca; // также для b
        if (vb[i] == lca)
            break;
        --bridges;
    }
}

void add_edge(int a, int b) // добавление ребра (a, b)
{
    a = get(a); // получение главной компоненты для a
    b = get(b); // получение главной компоненты для b
    if (a == b) // если они принадлежат одной и той же компоненте двуреберной связности, то добавдние ребра не изменит кол-во мостов
        return;

    int ca = get_comp(a), cb = get_comp(cb); // получение главных вершин компонент сильной связности
    if (ca != cb)                            // если они разные, то есть между ними нет пересечания
    {
        ++bridges;               // то при первом их объединении между ними появится мост
        if (size[ca] > size[cb]) // a - вершина большей компоненты
        {
            swap(a, b); // меняем местами
            swap(ca, cb);
        }
        make_root(a);         // подвешиваем меньшую копоненту на вершину a
        par[a] = comp[a] = b; // добавляем b к компоненте
        size[cb] += size[a];  // прибавляем размер компоненты a
    }
    else                  // если они принадлежат одной и той же компоненте сильной связности
        merge_path(a, b); // сжимаем путь между ними до одной вершины
}

int main()
{
    init();
    char c;
    do
    {
        cout << "Do you want to add edge? (y/n): ";
        cin >> c;
        if (c == 'Y' || c == 'y')
        {
            int a, b;
            cout << "Enter edge: (a b): ";
            cin >> a >> b;
            if (a >= n || b >= n)
            {
                cout << "Out of vertex range ( max value is " << MAXN - 1 << ")!\n";
                continue;
            }
            add_edge(a, b);
            cout << "Number of bridges: " << bridges << endl;
        }
        else
            break;
    } while (true);
    return 0;
}
